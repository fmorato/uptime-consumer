#!/usr/bin/env python3
import argparse
import logging
import os
import sys
from datetime import datetime, timedelta

import psycopg2
from kafka import KafkaConsumer


def make_uptime_readable(value):
    uptime = int(value.decode('utf8').split()[0].split('.')[0])
    return str(timedelta(seconds=uptime))


def run():
    logger = logging.getLogger('uptime.consumer')

    logger.info('Creating a consumer')
    consumer = KafkaConsumer(config.topic, bootstrap_servers=config.kafka_url,
                             group_id=config.group_id,
                             security_protocol='SSL' if config.ca and config.cert and config.key else 'PLAINTEXT',
                             ssl_cafile=config.ca,
                             ssl_certfile=config.cert,
                             ssl_keyfile=config.key)

    logger.info('Connecting to PostgreSQL')
    try:
        pg = psycopg2.connect(config.postgres_uri)
    except Exception:
        logger.exception('Unable to connect to Postgres at {}'.format(config.postgres_uri))
        sys.exit(1)

    for msg in consumer:
        timestamp = datetime.utcfromtimestamp(msg.timestamp / 1e3)
        uptime = make_uptime_readable(msg.value)
        logger.info('Received: offset: {} timestamp: {} uptime: {}'.format(msg.offset, timestamp, uptime))

        try:
            with pg:
                with pg.cursor() as cur:
                    cur.execute('INSERT INTO uptime (timestamp, uptime) VALUES (%s, %s)',
                                (timestamp, msg.value.decode('utf8')))

            logger.info('Persisted: offset: {} timestamp: {} uptime: {:0>8}'.format(msg.offset, timestamp, uptime))
        except Exception:
            logger.exception(
                'Unable to persist offset: {} timestamp: {} uptime: {}'.format(msg.offset, msg.timestamp, msg.value))
            sys.exit(1)  # Maybe the database is down. systemd or another supervisor should try to restart the process

    pg.close()


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s %(name)s %(message)s')

    parser = argparse.ArgumentParser()

    parser.add_argument('--cert', dest='cert', metavar='CERT', default=os.environ.get('KAFKA_CERT'),
                        help='ssl certificate')
    parser.add_argument('--key', dest='key', metavar='KEY', default=os.environ.get('KAFKA_KEY'),
                        help='ssl certificate key')
    parser.add_argument('--ca', dest='ca', metavar='CA', default=os.environ.get('KAFKA_CA'),
                        help='ssl certificate root ca')
    parser.add_argument('-g', '--group-id', dest='group_id', metavar='GROUP_ID',
                        default=os.environ.get('KAFKA_GROUP_ID'), help='topic group this client is part of')
    parser.add_argument('-t', '--topic', dest='topic', metavar='TOPIC', default=os.environ.get('KAFKA_TOPIC'),
                        help='kafka topic to send data to')
    parser.add_argument('-k', '--kafka', dest='kafka_url', metavar='KAFKA_URL', nargs='+',
                        default=[os.environ.get('KAFKA_URL')], help='kafka server URL')
    parser.add_argument('-p', '--postgres', dest='postgres_uri', metavar='POSTGRES_URI',
                        default=os.environ.get('POSTGRES_URI'), help='postgres server URI')

    config = parser.parse_args()
    run()
